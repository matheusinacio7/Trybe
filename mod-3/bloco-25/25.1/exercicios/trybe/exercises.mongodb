// Exercício 1: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "MASCULINO" .
db.getSiblingDB('trybe').clientes
  .aggregate([
    { $match: { sexo: 'MASCULINO' } }
  ]);

// Exercício 2: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 .
db.getSiblingDB('trybe').clientes
  .aggregate([
    { $match: { sexo: 'FEMININO', dataNascimento: { $lt: ISODate('2006-01-01'), $gte: ISODate('1995-01-01') } } }
  ]);

// Exercício 3: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 , limitando a quantidade de documentos retornados em 5 .
db.getSiblingDB('trybe').clientes
  .aggregate([
    { $match: { sexo: 'FEMININO', dataNascimento: { $lt: ISODate('2006-01-01'), $gte: ISODate('1995-01-01') } } },
    { $limit: 5 }
  ]);

// Exercício 4: Conte quantos clientes do estado SC existem na coleção. Retorne um documento em que o campo _id contenha a UF e outro campo com o total.
db.getSiblingDB('trybe').clientes
  .aggregate([
    { $match: { 'endereco.uf': 'SC' } },
    { $group: { _id: '$endereco.uf', total: { $sum: 1 } } }
  ]);

// Exercício 5: Agrupe os clientes por sexo . Retorne o total de clientes de cada sexo no campo total .
db.getSiblingDB('trybe').clientes
  .aggregate([
    { $group: { _id: '$sexo', total: { $sum: 1 } } }
  ]);

// Exercício 6: Agrupe os clientes por sexo e uf . Retorne o total de clientes de cada sexo no campo total . 
db.getSiblingDB('trybe').clientes
  .aggregate([
    { $group: { _id: { sexo: '$sexo', uf: '$endereco.uf' }, total: { $sum: 1 } } }
  ]);

// Exercício 7 : Utilizando a mesma agregação do exercício anterior, adicione um estágio de projeção para modificar os documentos de saída, de forma que se pareçam com o documento a seguir (não se importe com a ordem dos campos): 
/*
{
  "estado": "SP",
  "sexo": "MASCULINO",
  "total": 100
}
*/

db.getSiblingDB('trybe').clientes
  .aggregate([
    { $group: { _id: { sexo: '$sexo', uf: '$endereco.uf' }, total: { $sum: 1 } } },
    { $project: { _id: 0, estado: "$_id.uf", sexo: "$_id.sexo", total: 1 } }
  ]);

// Exercício 8 : Descubra quais são os 5 clientes que gastaram o maior valor.
db.getSiblingDB('trybe').vendas.find();

db.getSiblingDB('trybe').vendas.aggregate([
  { $unwind: "$itens" },
  { $group: { _id: "$clienteId", totalGasto: { $sum: { $multiply: ["$itens.valorUnitario", "$itens.quantidade"] } } } },
  { $sort: { totalGasto: -1 } },
  { $limit: 5 },
  { $lookup: {
      from: 'clientes',
      localField: '_id',
      foreignField: 'clienteId',
      as: 'clienteDocumento',
  } },
  { $project: { _id: 0, nome: "$clienteDocumento.nome", totalGasto: 1 } }
]);


// Exercício 9 : Descubra quais são os 10 clientes que gastaram o maior valor no ano de 2019 .
db.getSiblingDB('trybe').vendas.aggregate([
  { $match: { dataVenda: { $lt: ISODate('2020-01-01'), $gte: ISODate('2019-01-01') } } },
  { $unwind: "$itens" },
  { $group: { _id: "$clienteId", totalGasto: { $sum: { $multiply: ["$itens.valorUnitario", "$itens.quantidade"] } } } },
  { $sort: { totalGasto: -1 } },
  { $limit: 10 },
  { $lookup: {
      from: 'clientes',
      localField: '_id',
      foreignField: 'clienteId',
      as: 'clienteDocumento',
  } },
  { $project: { _id: 0, nome: "$clienteDocumento.nome", totalGasto: 1 } }
]);

// Exercício 10 : Descubra quantos clientes compraram mais de 5 vezes. Retorne um documento que contenha somente o campo clientes com o total de clientes.
// Dica: O operador $count pode simplificar sua query .
db.getSiblingDB('trybe').vendas.aggregate([
  { $group: { _id: '$clienteId', totalCompras: { $sum: 1 } } },
  { $match: { totalCompras: { $gt: 5 } } },
  { $group: { _id: null, totalClientes: { $sum: 1 } } },
  { $project: { _id: 0, clientes: "$totalClientes" } }
]);

// Exercício 11 : Descubra quantos clientes compraram menos de três vezes entre os meses de Janeiro de 2020 e Março de 2020 .

db.getSiblingDB('trybe').clientes.insertOne({ clienteId: 501 });

db.getSiblingDB('trybe').clientes.find().sort({ clienteId: -1 });

db.getSiblingDB('trybe').clientes.aggregate([
  { $lookup: {
      from: 'vendas',
      foreignField: 'clienteId',
      localField: 'clienteId',
      as: 'vendasDocumentos',
  } },
  { $project: {
      _id: 0,
      clienteId: 1,
      comprasNoPeriodo: { $filter: {
        input: '$vendasDocumentos',
        as: 'compra',
        cond: { $and: [
          { $gte: ['$$compra.dataVenda', ISODate('2020-01-01')] },
          { $lt: ['$$compra.dataVenda', ISODate('2020-04-01')] }
        ] }
      } } 
    } 
  },
  { $project: { clienteId: 1, totalComprasNoPeriodo: { $size: '$comprasNoPeriodo' } } },
  { $match: { totalComprasNoPeriodo: { $lt: 3 } } },
  { $count: 'totalClientes' }
]);

// Exercício 12 : Descubra quais as três uf s que mais compraram no ano de 2020 . Retorne os documentos no seguinte formato: 

/*
{
  "totalVendas": 10,
  "uf": "SP"
}
*/

db.getSiblingDB('trybe').vendas.aggregate([
  { $lookup: {
      from: 'clientes',
      foreignField: 'clienteId',
      localField: 'clienteId',
      as: 'clienteDocumento'
  } },
  {
    $group: { _id: '$clienteDocumento.endereco.uf', totalVendas: { $sum: 1 } }
  },
  { $sort: { totalVendas: -1 } },
  { $limit: 3 },
  { $project: { _id: 0, uf: '$_id', totalVendas: 1 } }
]);

// Exercício 13 : Encontre qual foi o total de vendas e a média de vendas de cada uf no ano de 2019 . Ordene os resultados pelo nome da uf . Retorne os documentos no seguinte formato: 
/*
{
  "_id": "MG",
  "mediaVendas": 9407.129225352113,
  "totalVendas": 142
}
*/

db.getSiblingDB('trybe').vendas.aggregate([
  { $lookup: {
      from: 'clientes',
      foreignField: 'clienteId',
      localField: 'clienteId',
      as: 'clienteDocumento'
  } },
  {
    $match: { dataVenda: { $gte: ISODate('2019-01-01'), $lt: ISODate('2020-01-01') } }
  },
  {
    $group: { _id: '$clienteDocumento.endereco.uf', totalVendas: { $sum: 1 }, mediaVendas: { $avg: '$valorTotal' } }
  },
  { $unwind: '$_id' },
  { $sort: { _id: 1 } }
]);
